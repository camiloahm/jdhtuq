/*
 *  DHash project implement a storage management 
 *  Copyright (C) 2010  Daniel Pelaez, Daniel Lopez, Hector Hurtado
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *  
 *  This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1-b02-fcs 
 *  See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
 *  Any modifications to this file will be lost upon recompilation of the source schema. 
 *  Generated on: 2002.01.01 at 01:28:54 AM COT 
 */

package co.edu.uniquindio.dhash.configurations;

import java.io.File;
import java.net.URISyntaxException;
import java.security.CodeSource;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import co.edu.uniquindio.utils.logger.LoggerDHT;

/**
 * 
 * The <code>DHashProperties</code> class storage all properties of
 * configuration for DHash
 * <p>
 * Java class for anonymous complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.DHT-UQ.org/dhash}overlay"/>
 *         &lt;element ref="{http://www.DHT-UQ.org/dhash}replication"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * @author Daniel Pelaez
 * @author Hector Hurtado
 * @author Daniel Lopez
 * @version 1.0, 17/06/2010
 * @since 1.0
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = { "overlay", "replication" })
@XmlRootElement(name = "dhash")
public class DHashProperties {
	/**
	 * Logger
	 */
	private static final LoggerDHT logger = LoggerDHT
			.getLogger(DHashProperties.class);

	/**
	 * Single DHashProperties instance
	 */
	private static DHashProperties dHashProperties;

	/**
	 * Package that contains mapped class to XML
	 */
	private static final String PACKAGE = "co.edu.uniquindio.dhash.configurations";

	/**
	 * Path where is the properties file named dhash.xml
	 */
	private static final String FILE = "resources/dhash_properties/dhash.xml";

	/**
	 * Load all properties from properties file in XML
	 * 
	 * @throws DHashPropertiesException
	 *             throw when error occur
	 */
	private void load() throws DHashPropertiesException {
		try {
			CodeSource codeSource = DHashProperties.class.getProtectionDomain()
					.getCodeSource();
			File jarFile = new File(codeSource.getLocation().toURI().getPath());

			File jarDir = jarFile.getParentFile();

			File propFile = null;
			if (jarDir != null && jarDir.isDirectory()) {
				propFile = new File(jarDir, FILE);
			}

			JAXBContext jContext = JAXBContext.newInstance(PACKAGE);
			Unmarshaller u = jContext.createUnmarshaller();

			dHashProperties = (DHashProperties) u.unmarshal(propFile);

			logger.info("Load property overlay.factoryClass = "
					+ dHashProperties.getOverlay().getFactoryClass());

			logger.info("Load property overlay.observerClass = "
					+ dHashProperties.getOverlay().getObserverClass());

			if (dHashProperties.getReplication().getAmount() < 1) {
				throw new DHashPropertiesException(
						"The property replication.amount not should menor to 1");
			}

			logger.info("Load property replication.amount = "
					+ dHashProperties.getReplication().getAmount());

		} catch (JAXBException e) {
			throw new DHashPropertiesException("Error reading file " + FILE, e);
		} catch (URISyntaxException e) {
			throw new DHashPropertiesException("Syntax error", e);
		}
	}

	/**
	 * Returns the single instance of dhash properties
	 * 
	 * @return DHashProperties Single instancia of dhash properties
	 * 
	 */
	public static DHashProperties getInstance() {
		if (dHashProperties == null) {
			dHashProperties = new DHashProperties();
			try {
				dHashProperties.load();
			} catch (DHashPropertiesException e) {
				logger.fatal("Error loading file " + FILE);
			}
		}
		return dHashProperties;
	}

	/**
	 * Overlay configuration
	 */
	@XmlElement(required = true)
	protected Overlay overlay;

	/**
	 * Replication configuration
	 */
	@XmlElement(required = true)
	protected Replication replication;

	/**
	 * Gets the value of the overlay property.
	 * 
	 * @return possible object is {@link Overlay }
	 * 
	 */
	public Overlay getOverlay() {
		return overlay;
	}

	/**
	 * Sets the value of the overlay property.
	 * 
	 * @param value
	 *            allowed object is {@link Overlay }
	 * 
	 */
	public void setOverlay(Overlay value) {
		this.overlay = value;
	}

	/**
	 * Gets the value of the replication property.
	 * 
	 * @return possible object is {@link Replication }
	 * 
	 */
	public Replication getReplication() {
		return replication;
	}

	/**
	 * Sets the value of the replication property.
	 * 
	 * @param value
	 *            allowed object is {@link Replication }
	 * 
	 */
	public void setReplication(Replication value) {
		this.replication = value;
	}

}
