/*
 *  Communication project implement communication point to point and multicast
 *  Copyright (C) 2010  Daniel Pelaez, Daniel Lopez, Hector Hurtado
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *  
 *  This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1-b02-fcs 
 *  See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
 *  Any modifications to this file will be lost upon recompilation of the source schema. 
 *  Generated on: 2010.05.13 at 08:03:13 AM COT 
 */

package co.edu.uniquindio.utils.communication.message;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;

/**
 * This object contains factory methods for each Java content interface and Java
 * element interface generated in the prueba package.
 * <p>
 * An ObjectFactory allows you to programatically construct new instances of the
 * Java representation for XML content. The Java representation of XML content
 * can consist of schema derived interfaces and classes representing the binding
 * of schema type definitions, element declarations and model groups. Factory
 * methods for each of these are provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

	private final static QName _BigMessage_QNAME = new QName(
			"http://www.DHT-UQ.org/message", "bigMessage");
	private final static QName _Message_QNAME = new QName(
			"http://www.DHT-UQ.org/message", "message");

	/**
	 * Create a new ObjectFactory that can be used to create new instances of
	 * schema derived classes for package: prueba
	 * 
	 */
	public ObjectFactory() {
	}

	/**
	 * Create an instance of {@link BigMessageXML }
	 * 
	 */
	public BigMessageXML createBigMessage() {
		return new BigMessageXML();
	}

	/**
	 * Create an instance of {@link Params }
	 * 
	 */
	public Params createParams() {
		return new Params();
	}

	/**
	 * Create an instance of {@link Datas }
	 * 
	 */
	public Datas createDatas() {
		return new Datas();
	}

	/**
	 * Create an instance of {@link Data }
	 * 
	 */
	public Data createData() {
		return new Data();
	}

	/**
	 * Create an instance of {@link Address }
	 * 
	 */
	public Address createAddress() {
		return new Address();
	}

	/**
	 * Create an instance of {@link MessageXML }
	 * 
	 */
	public MessageXML createMessage() {
		return new MessageXML();
	}

	/**
	 * Create an instance of {@link MessageType }
	 * 
	 */
	public MessageType createType() {
		return new MessageType();
	}

	/**
	 * Create an instance of {@link Param }
	 * 
	 */
	public Param createParam() {
		return new Param();
	}

	/**
	 * Create an instance of {@link JAXBElement }{@code <}{@link BigMessageXML }
	 * {@code >}
	 * 
	 */
	@XmlElementDecl(namespace = "http://www.DHT-UQ.org/message", name = "bigMessage")
	public JAXBElement<BigMessageXML> createBigMessage(BigMessageXML value) {
		return new JAXBElement<BigMessageXML>(_BigMessage_QNAME, BigMessageXML.class,
				null, value);
	}

	/**
	 * Create an instance of {@link JAXBElement }{@code <}{@link MessageXML }{@code
	 * >}
	 * 
	 */
	@XmlElementDecl(namespace = "http://www.DHT-UQ.org/message", name = "message")
	public JAXBElement<MessageXML> createMessage(MessageXML value) {
		return new JAXBElement<MessageXML>(_Message_QNAME, MessageXML.class, null,
				value);
	}

}
