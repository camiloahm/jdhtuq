/*
 *  Communication project implement communication point to point and multicast
 *  Copyright (C) 2010  Daniel Pelaez, Daniel Lopez, Hector Hurtado
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *  
 *  This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1-b02-fcs 
 *  See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
 *  Any modifications to this file will be lost upon recompilation of the source schema. 
 *  Generated on: 2002.01.01 at 12:38:24 AM COT 
 */

package co.edu.uniquindio.utils.communication.configurations;

import java.io.File;
import java.net.URISyntaxException;
import java.security.CodeSource;
import java.util.HashMap;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

/**
 * <p>
 * Java class for anonymous complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.DHT-UQ.org/communication}instance"/>
 *         &lt;element ref="{http://www.DHT-UQ.org/communication}time"/>
 *         &lt;element ref="{http://www.DHT-UQ.org/communication}params"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * @author Daniel Pelaez
 * @author Hector Hurtado
 * @author Daniel Lopez
 * @version 1.0, 17/06/2010
 * @since 1.0
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = { "instance", "time", "params" })
@XmlRootElement(name = "communication")
public class CommunicationProperties {

	/**
	 * Package that contains mapped class to XML
	 */
	private static final String PACKAGE = "co.edu.uniquindio.utils.communication.configurations";

	/**
	 * Creates a CommunicationProperties by clazz that invoke and path of file
	 * properties
	 * 
	 * @param clazz
	 *            Class that invoke this method
	 * @param filePath
	 *            Path to file properties
	 * @return CommunicationProperties
	 * @throws CommunicationPropertiesException
	 *             throw when error occur
	 */
	public static CommunicationProperties load(Class<?> clazz, String filePath)
			throws CommunicationPropertiesException {
		try {
			CodeSource codeSource = clazz.getProtectionDomain().getCodeSource();
			File jarFile = new File(codeSource.getLocation().toURI().getPath());

			File jarDir = jarFile.getParentFile();

			File propFile = null;
			if (jarDir != null && jarDir.isDirectory()) {
				propFile = new File(jarDir, filePath);
			}

			JAXBContext jContext = JAXBContext.newInstance(PACKAGE);
			Unmarshaller u = jContext.createUnmarshaller();

			return (CommunicationProperties) u.unmarshal(propFile);

		} catch (JAXBException e) {
			throw new CommunicationPropertiesException("Error reading file "
					+ filePath, e);

		} catch (URISyntaxException e) {
			throw new CommunicationPropertiesException("Error reading file "
					+ filePath, e);
		}
	}

	/**
	 * Object instance
	 */
	@XmlElement(required = true)
	protected Instance instance;
	/**
	 * Object time
	 */
	@XmlElement(required = true)
	protected Time time;
	/**
	 * Params communication
	 */
	@XmlElement(required = true)
	@XmlJavaTypeAdapter(XmlAdapterHashMap.class)
	protected HashMap<String, String> params;

	/**
	 * Gets the value of the instance property.
	 * 
	 * @return possible object is {@link Instance }
	 * 
	 */
	public Instance getInstance() {
		return instance;
	}

	/**
	 * Sets the value of the instance property.
	 * 
	 * @param value
	 *            allowed object is {@link Instance }
	 * 
	 */
	public void setInstance(Instance value) {
		this.instance = value;
	}

	/**
	 * Gets the value of the time property.
	 * 
	 * @return possible object is {@link Time }
	 * 
	 */
	public Time getTime() {
		return time;
	}

	/**
	 * Sets the value of the time property.
	 * 
	 * @param value
	 *            allowed object is {@link Time }
	 * 
	 */
	public void setTime(Time value) {
		this.time = value;
	}

	/**
	 * Gets params
	 * 
	 * @return Params
	 */
	public HashMap<String, String> getParams() {
		return params;
	}

	/**
	 * Sets params
	 * 
	 * @param params
	 */
	public void setParams(HashMap<String, String> params) {
		this.params = params;
	}

}
